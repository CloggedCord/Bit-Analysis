/***************************************************************************/
/*                                                                         */
/*  Filename: sis3316_offline.cpp                                          */
/*                                                                         */
/*  Funktion:                                                              */
/*                                                                         */
/*  Autor:                TH                                               */
/*  date:                 27.06.2018                                       */
/*  last modification:    11.11.2021                                       */
/*                                                                         */
/* ----------------------------------------------------------------------- */
/*                                                                         */
/*  SIS  Struck Innovative Systeme GmbH                                    */
/*                                                                         */
/*  Harksheider Str. 102A                                                  */
/*  22399 Hamburg                                                          */
/*                                                                         */
/*  Tel. +49 (0)40 60 87 305 0                                             */
/*  Fax  +49 (0)40 60 87 305 20                                            */
/*                                                                         */
/*  http://www.struck.de                                                   */
/*                                                                         */
/*  � 2021                                                                 */
/*                                                                         */
/***************************************************************************/

//#define SIS3316_DATA_FORMAT_2021

#include "project_system_define.h"        //define LINUX or WINDOWS
#define CERN_ROOT_PLOT

#ifdef LINUX
#endif

#ifdef WINDOWS
      #include "wingetopt.h"
#endif

#include <iostream>
using namespace std;




#ifdef CERN_ROOT_PLOT
      #include "C:\Users\BACoN\SIS-DVD-20-June-2022\sis3316\software\win10\libraries_and_includes\sis_cern_root_library\rootIncludes.h"
      #include "C:\Users\BACoN\SIS-DVD-20-June-2022\sis3316\software\win10\libraries_and_includes\sis_cern_root_library\sis3316_cern_root_class.h"
      #ifdef WINDOWS
            #pragma comment (lib, "libRio")
            #pragma comment (lib, "libcore")
            #pragma comment (lib, "libHist")
            #pragma comment (lib, "libTree")
            #pragma comment (lib, "libgpad")
//          #pragma comment (lib, "libCint")   remove with root_v6.xx.xx
            #pragma comment (lib, "libGraf")
            #pragma comment (lib, "libGui")
      #endif
#endif

#ifdef CERN_ROOT_PLOT
sis_root_graph *gl_graph_raw ;
sis_root_graph_maw *gl_graph_maw ;
#endif


/*===========================================================================*/
/* Globals                                                 */
/*===========================================================================*/
#define MAX_NUMBER_LWORDS_64MBYTE               0x1000000       /* 64MByte */

unsigned int gl_ch_data[MAX_NUMBER_LWORDS_64MBYTE] ;



FILE *gl_FILE_DataEvenFilePointer           ;

/*===========================================================================*/
/* Prototypes                                                                                  */
/*===========================================================================*/

int ReadBufferHeaderCounterNofChannelToDataFile (unsigned int* header_marker, unsigned int* sis3316_indentifier, unsigned int* bank_loop_no, unsigned int* channel_no, unsigned int* nof_events, unsigned int* event_length, unsigned int* maw_length, unsigned int* reserved_ch_bankx_buffer_length);
int ReadEventsFromDataFile (unsigned int* memory_data_array, unsigned int nof_write_length_lwords);


/* ***************************************************************************************************************** */
int main(int argc, char* argv[]) {
      cout << "sis3316_offline" << endl; // prints sis3316_offline

      unsigned valid_BankBufferHeader_valid_flag ;
      int nof_read ;
      unsigned buffer_no ;
      unsigned i_event ;
      unsigned nof_events ;
      unsigned buffer_length ;
      unsigned event_length ;
      unsigned header_length ;
      unsigned sample_length ;
      unsigned channel_no ;
      unsigned short_event_and_maw_buffer_length ;
      unsigned i_ch ;
      unsigned headerformat ;

      unsigned header_marker ;
      unsigned header_indentifier ;
      unsigned header_reserved_ch_bankx_buffer_length ;
      unsigned int uint_save_raw_sample_first_event_only_mode;

      //unsigned int i ;
      //unsigned int adc_offset ;
      //unsigned int adc_length ;
      //unsigned int maw_offset ;
      //unsigned int maw_length ;
      unsigned int maw_buffer_length ;

      unsigned uint_plot_axis_flag;
      unsigned uint_current_bankx_buffer_counter;

      unsigned bank_buffer_counter ;

      char filename[512]  ;
      //unsigned int i_file;
      int int_ch ;


      if (argc > 1) {

            while ((int_ch = getopt(argc, argv, "?hF:")) != -1) {
                  switch (int_ch) {
                        //printf("ch %c    \n", int_ch );

                        case 'F':
                              sscanf(optarg,"%s", filename) ;
                              break;


                        case '?':
                        case 'h':
                        default:
                              //printf("Usage: %s  [-?h] [-I ip] [-A num]  ", argv[0]);
                              printf("Usage: %s  [-?h] [-F data_filename.dat] ", argv[0]);
                              printf("   \n");
                              printf("   \n");
                              printf("   -F filename.dat .  read from file  \n");
                              printf("   \n");
                              printf("   -h     ..........  print this message only\n");
                              printf("   \n");
                            printf("   \n");
                              printf("   date:               11. November 2021 \n");
                              printf("   \n");
                              printf("   \n");
                              exit(1);
                  }
            }
    } // if (argc > 2)

      printf("\n");



      /******************************************************************************************************************************/
      /* CERN ROOT                                                                                                                  */
      /******************************************************************************************************************************/

      #ifdef CERN_ROOT_PLOT

            int root_graph_x ;
            int root_graph_y ;
            int root_graph_x_size ;
            int root_graph_y_size ;
            char root_graph_text[80] ;

            root_graph_x_size = 900 ;
            root_graph_y_size = 500 ;

            root_graph_x = 10 ;
            root_graph_y = 620 ;

            TApplication theApp("SIS3316 Application: Test", &argc, (char**)argv);
            strcpy(root_graph_text,"SIS3316 Graph: Raw data") ;
            gl_graph_raw      = new sis_root_graph(root_graph_text, root_graph_x, root_graph_y, root_graph_x_size, root_graph_y_size) ;
            //strcpy(root_graph_text,"SIS3316 Graph: Maw data") ;
            //gl_graph_maw      = new sis_root_graph_maw(root_graph_text, root_graph_x + root_graph_x_size + 10, root_graph_y, root_graph_x_size, root_graph_y_size) ;




      #endif

            #ifdef not_used
            // file read
            gl_FILE_DataEvenFilePointer = fopen("ne213/sis3316_test_data.dat","rb") ;
            if (gl_FILE_DataEvenFilePointer == NULL) {
                  printf("gl_FILE_DataEvenFilePointer == NULL \n");
                  return -1;
            }
            else {
                  printf("file is opened \n");
            }
            #endif

            bank_buffer_counter = 0 ;

            //sprintf(filename,"../data_files/sample_test_gui/sis3316_test_data_%d.dat",i_file ) ;
            printf("%s\n",filename) ;
            gl_FILE_DataEvenFilePointer = fopen(filename,"rb") ;
            if (gl_FILE_DataEvenFilePointer == NULL) {
                  printf("gl_FILE_DataEvenFilePointer == NULL \n");
                  return -1;
            }


            if (gl_FILE_DataEvenFilePointer != NULL) {
                        uint_plot_axis_flag = 1 ; // set first time:  clear graph and draw x-y axis flag
                        uint_current_bankx_buffer_counter = 0 ; //


                        do {
                              valid_BankBufferHeader_valid_flag = 0 ;
                              nof_read = ReadBufferHeaderCounterNofChannelToDataFile (&header_marker, &header_indentifier, &buffer_no, &channel_no, &nof_events, &event_length, &short_event_and_maw_buffer_length, &header_reserved_ch_bankx_buffer_length) ;
                              printf("\n");
                              //printf("header: marker = 0x%08x    identifier = 0x%08x      length = %d    \n", header_marker, header_indentifier, nof_read);

                              if (nof_read != 8) {
                                          valid_BankBufferHeader_valid_flag = 0 ;
                                          printf("Stop Condition: no Header data (EOF)\n");
                              }
                               else { // valid header length
                                     if(header_marker != 0xDEADBEEF) {
                                          valid_BankBufferHeader_valid_flag = 0 ;
                                          printf("Stop Condition: no valid header-marker (0xDEADBEEF) \n");

                                     }
                                     else {
                                          valid_BankBufferHeader_valid_flag = 1 ;
                                          if(uint_current_bankx_buffer_counter != buffer_no) { // new bankx buffer no/counter
                                                uint_plot_axis_flag = 1 ; // set clear graph and draw x-y axis flag
                                                uint_current_bankx_buffer_counter = buffer_no ;
                                                printf("Set uint_plot_axis_flag  \n");
                                          }
      #ifdef CERN_ROOT_PLOT
                                          if(header_indentifier == 0) { // sis3316-250MHZ-14bit
                                                gl_graph_raw->sis3316_set_14bit_Yaxis();
                                          }
                                          else {
                                                gl_graph_raw->sis3316_set_16bit_Yaxis();
                                          }
      #endif
                                          // print Buffer Header
                                          printf("Chx Bankx buffer header information: \n");
                                          printf("\tindentifier       = %d   \tbuffer_no    = %d    \tchannel_id         = %d   \n", header_indentifier, buffer_no, channel_no);
                                          printf("\tnof_events        = %d   \tevent_length = %d    \tshort_event_length = %d   \traw_data_first_event_only_flag = %d  \n", nof_events,  event_length, (short_event_and_maw_buffer_length & 0x7fff) >> 16, (short_event_and_maw_buffer_length & 0x780000000) >> 31  );
                                          printf("\tmaw_buffer_length = %d    \n",  (short_event_and_maw_buffer_length & 0x7fff));
                                          printf("\treserved_ch_bankx_buffer_length = %d (0x%08x) \n", header_reserved_ch_bankx_buffer_length, header_reserved_ch_bankx_buffer_length);
                                          printf(" \n" );

                                          maw_buffer_length = (short_event_and_maw_buffer_length & 0x7fff) ;

#ifdef SIS3316_DATA_FORMAT_2021
// changed meaning of "MAW_BUFFER_LENGTH" (31:0) to "SaveRawDataOfFirstEventOnlyFlag" (bit 31),  "SHORT_EVENT_LENGTH" (30:16) and "MAW_BUFFER_LENGTH" (15 downto 0)
// changed meaning of "Reserved" to "MultiEventBufferLength"
                                    // read all events of one "channel bankx buffer from file"
                                          buffer_length = header_reserved_ch_bankx_buffer_length & 0x7fffffff ;
                                          if(buffer_length > MAX_NUMBER_LWORDS_64MBYTE) {
                                                buffer_length = MAX_NUMBER_LWORDS_64MBYTE ;
                                          }
                                          nof_read =  ReadEventsFromDataFile (gl_ch_data, buffer_length); // read full buffer
                                          headerformat =  (gl_ch_data[0] & 0xf) ; // for each event !

                                          //printf("nof_read = %d  \tcChannel ID = %d   \tFormat bits = 0x%02X \n",  nof_read,      (gl_ch_data[0] & 0xfff0) >> 4, headerformat);
                                          i_ch = (gl_ch_data[0] & 0xfff0) >> 4 ;
                                          printf("nof_read = %d  \tChannel ID = %d (0x%03x)  \tFormat bits = 0x%02X \n",  nof_read, i_ch, i_ch, headerformat);

                                          header_length = 3 ; // if headerformat == 0
                                          if((headerformat & 0x1) == 1) {header_length = header_length + 7; }
                                          if((headerformat & 0x2) == 2) {header_length = header_length + 2; }
                                          if((headerformat & 0x4) == 4) {header_length = header_length + 3; }
                                          if((headerformat & 0x8) == 8) {header_length = header_length + 2; }

                                          sample_length = 2 * (gl_ch_data[header_length-1] & 0x3ffffff) ; // if headerformat == 0

                                          unsigned int uint_short_event_length ;
                                          unsigned int uint_calculated_buffer_length ;

                                          uint_short_event_length = (short_event_and_maw_buffer_length & 0x7fff0000) >> 16;
                                          if((short_event_and_maw_buffer_length & 0x80000000) == 0x80000000) { // bit 31 is set ?
                                                uint_save_raw_sample_first_event_only_mode = 1;
                                          }
                                          else {
                                                uint_save_raw_sample_first_event_only_mode = 0;
                                          }
      #ifdef CERN_ROOT_PLOT
                                          if(uint_plot_axis_flag == 1) {
                                                //printf("uint_plot_axis_flag == 1\n");
                                                uint_plot_axis_flag = 0 ;
                                                gl_graph_raw->sis3316_draw_XYaxis (sample_length); // clear and draw X/Y
                                          }
      #endif
                                          if(uint_save_raw_sample_first_event_only_mode == 0) {
                                                for (i_event = 0; i_event < nof_events; i_event++) {
                                                      if (i_event<10) { // plot ony the first 10. events
                                                            //if (i_event<1) { // plot ony 1. event
      #ifdef CERN_ROOT_PLOT
                                                            gl_graph_raw->sis3316_draw_chN (sample_length, &gl_ch_data[i_event*(event_length) + header_length], i_ch&0xf); //
      #endif
                                                      }
                                                }
                                          }
                                          else { // draw only first event
                                                i_event = 0 ;
#ifdef CERN_ROOT_PLOT
                                                gl_graph_raw->sis3316_draw_chN (sample_length, &gl_ch_data[i_event*(event_length) + header_length], i_ch&0xf); //
#endif
                                          }

                                          // make a length check
                                          if(uint_save_raw_sample_first_event_only_mode == 0) {
                                                uint_calculated_buffer_length = nof_events * event_length ;
                                          }
                                          else {
                                                uint_calculated_buffer_length = event_length + ((nof_events -1) * uint_short_event_length) ;
                                          }
                                          if (buffer_length != uint_calculated_buffer_length) {
                                                      valid_BankBufferHeader_valid_flag = 0 ;
                                                      printf("Stop Condition: (buffer_length != uint_calculated_buffer_length)\n");
                                          }



#else // before SIS3316_DATA_FORMAT_2021 - but works with FORMAT_2021 , also
                  // read event by event from file (has to check "sample length" of each event)
                                          nof_read = 0 ;
                                          for (i_event=0;i_event<nof_events; i_event++) {
                                                nof_read =  nof_read + ReadEventsFromDataFile (&gl_ch_data[0], 1);
                                                i_ch = (gl_ch_data[0] & 0xfff0) >> 4 ;
                                                headerformat =  (gl_ch_data[0] & 0xf) ;
                                                header_length = 3 ; // if headerformat == 0
                                                if((headerformat & 0x1) == 1) {header_length = header_length + 7; }
                                                if((headerformat & 0x2) == 2) {header_length = header_length + 2; }
                                                if((headerformat & 0x4) == 4) {header_length = header_length + 3; }
                                                if((headerformat & 0x8) == 8) {header_length = header_length + 2; }
                                                nof_read =  nof_read + ReadEventsFromDataFile (&gl_ch_data[1], header_length-1); // read rest of Event-Header

                                                sample_length = 2 * (gl_ch_data[header_length-1] & 0x3ffffff) ; //
                                                if(sample_length != 0) {
                                                      nof_read =  nof_read + ReadEventsFromDataFile (&gl_ch_data[header_length], sample_length/2); // read Raw Data
      #ifdef CERN_ROOT_PLOT
                                                      if(uint_plot_axis_flag == 1) {
                                                            //printf("uint_plot_axis_flag == 1\n");
                                                            uint_plot_axis_flag = 0 ;
                                                            gl_graph_raw->sis3316_draw_XYaxis (sample_length); // clear and draw X/Y
                                                      }
                                                      if (i_event<10) { // plot ony the first 10. events
                                                            //if (i_event<1) { // plot ony 1. event
                                                            gl_graph_raw->sis3316_draw_chN (sample_length, &gl_ch_data[header_length], (i_ch&0xf)); //
                                                      }
      #endif
                                                }
                                                if(maw_buffer_length != 0) {
                                                      nof_read =  nof_read + ReadEventsFromDataFile (&gl_ch_data[header_length+(sample_length/2)], maw_buffer_length); // read MAW Data
                                                }
                                          }

#endif      //SIS3316_DATA_FORMAT_2021


                                          printf("\n");
                                          printf("nof_events = %d   nof_read = %d  \tChannel ID = %d   \tFormat bits = 0x%02X \n",  nof_events, nof_read,   (gl_ch_data[0] & 0xf0) >> 4, headerformat);
                                          printf("\n");
                                          printf("\n");
                                     }
                               }

                              gSystem->ProcessEvents();  // handle GUI events
                        } while((valid_BankBufferHeader_valid_flag == 1) ) ;









#ifdef raus
                                    valid_BankBufferHeader_valid_flag = 1 ;
                                    nof_read =  ReadEventsFromDataFile (gl_ch_data, buffer_length);
                                    headerformat =  (gl_ch_data[0] & 0xf) ;

                                    //printf("nof_read = %d  \tcChannel ID = %d   \tFormat bits = 0x%02X \n",  nof_read,      (gl_ch_data[0] & 0xfff0) >> 4, headerformat);
                                    printf("nof_read = %d  \tChannel ID = %d   \tFormat bits = 0x%02X \n",  nof_read,   (gl_ch_data[0] & 0xf0) >> 4, headerformat);
                                    i_ch = (gl_ch_data[0] & 0xfff0) >> 4 ;

                                    header_length = 3 ; // if headerformat == 0
                                    if((headerformat & 0x1) == 1) {header_length = header_length + 7; }
                                    if((headerformat & 0x2) == 2) {header_length = header_length + 2; }
                                    if((headerformat & 0x4) == 4) {header_length = header_length + 3; }
                                    if((headerformat & 0x8) == 8) {header_length = header_length + 2; }

                                    sample_length = 2 * (gl_ch_data[header_length-1] & 0x3ffffff) ; // if headerformat == 0
                                    if(uint_plot_axis_flag == 1) {
                                          //printf("uint_plot_axis_flag == 1\n");
                                          uint_plot_axis_flag = 0 ;
                                          gl_graph_raw->sis3316_draw_XYaxis (sample_length); // clear and draw X/Y
                                    }
                                    if(uint_save_raw_sample_first_event_only_mode == 0) {
                                          for (i_event = 0; i_event < nof_events; i_event++) {
                                                if (i_event<10) { // plot ony the first 10. events
                                                      //if (i_event<1) { // plot ony 1. event
                                                      gl_graph_raw->sis3316_draw_chN (sample_length, &gl_ch_data[i_event*(event_length) + header_length], i_ch&0xf); //
                                                }
                                          }
                                    }
                                    else { // draw only first event
                                          i_event = 0 ;
                                          gl_graph_raw->sis3316_draw_chN (sample_length, &gl_ch_data[i_event*(event_length) + header_length], (i_ch&0xf) + 1); //
                                    }

                               }

                              gSystem->ProcessEvents();  // handle GUI events
                        } while((valid_BankBufferHeader_valid_flag == 1) ) ;
#endif

                        printf("\n");

                        fclose(gl_FILE_DataEvenFilePointer);
                        printf("file closed and finished   \n");
                        bank_buffer_counter++;
                  }

            //}



            do {
                  gSystem->ProcessEvents();  // handle GUI events
            } while (1) ;


      return 0;
}


//---------------------------------------------------------------------------

int ReadBufferHeaderCounterNofChannelToDataFile (unsigned int* header_marker, unsigned int* sis3316_indentifier, unsigned int* bank_loop_no, unsigned int* channel_no, unsigned int* nof_events, unsigned int* event_length, unsigned int* maw_length, unsigned int* reserved_ch_bankx_buffer_length)
{
int nof_read ;
  //header
      nof_read=fread(header_marker, 0x4, 0x1, gl_FILE_DataEvenFilePointer);
      nof_read=nof_read+fread(sis3316_indentifier, 0x4, 0x1, gl_FILE_DataEvenFilePointer);
      nof_read=nof_read+fread(bank_loop_no, 0x4, 0x1, gl_FILE_DataEvenFilePointer);
      nof_read=nof_read+fread(channel_no, 0x4, 0x1, gl_FILE_DataEvenFilePointer);
      nof_read=nof_read+fread(nof_events, 0x4, 0x1, gl_FILE_DataEvenFilePointer);
      nof_read=nof_read+fread(event_length, 0x4, 0x1, gl_FILE_DataEvenFilePointer);
      nof_read=nof_read+fread(maw_length, 0x4, 0x1, gl_FILE_DataEvenFilePointer);
      nof_read=nof_read+fread(reserved_ch_bankx_buffer_length, 0x4, 0x1, gl_FILE_DataEvenFilePointer);

      return nof_read;
}


//---------------------------------------------------------------------------
int ReadEventsFromDataFile (unsigned int* memory_data_array, unsigned int nof_write_length_lwords)
{
int nof_read ;

      nof_read=fread(memory_data_array, 0x4, nof_write_length_lwords, gl_FILE_DataEvenFilePointer);
      return nof_read;
}
